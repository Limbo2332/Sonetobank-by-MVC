// <auto-generated />
using System;
using CourseWork_Update.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CourseWork_Update.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221209172354_ChangeSomeAttributes")]
    partial class ChangeSomeAttributes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CourseWork_Update.Models.CreditModel", b =>
                {
                    b.Property<string>("CreditId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("CreditSum")
                        .HasColumnType("float");

                    b.Property<int>("EmploymentType")
                        .HasColumnType("int");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.HasKey("CreditId");

                    b.ToTable("Credits");
                });

            modelBuilder.Entity("CourseWork_Update.Models.DepositModel", b =>
                {
                    b.Property<string>("DepositId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepositName")
                        .HasColumnType("int");

                    b.Property<double>("DepositSum")
                        .HasColumnType("float");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PercentAfterTax")
                        .HasColumnType("float");

                    b.Property<double>("PercentBeforeTax")
                        .HasColumnType("float");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.HasKey("DepositId");

                    b.ToTable("Deposits");
                });

            modelBuilder.Entity("CourseWork_Update.Models.Deposits.DepositsInfoModel", b =>
                {
                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaxSumOfDeposit")
                        .HasColumnType("float");

                    b.Property<double>("MinSumOfDeposit")
                        .HasColumnType("float");

                    b.Property<double>("PercentAfterTax")
                        .HasColumnType("float");

                    b.Property<double>("PercentBeforeTax")
                        .HasColumnType("float");

                    b.Property<string>("PhotoNumbersId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.HasKey("Title");

                    b.ToTable("DepositsInfoModels");

                    b.HasData(
                        new
                        {
                            Title = "Дитячий",
                            Description = "Накопичуйте кошти до повноліття дитини та створюйте матеріальну основу для отримання бажаної освіти, придбання омріяного житла <br />та всього необхідного.",
                            MaxSumOfDeposit = 1000000.0,
                            MinSumOfDeposit = 500.0,
                            PercentAfterTax = 4.0300000000000002,
                            PercentBeforeTax = 5.0,
                            PhotoNumbersId = "1 5 2 6 3 10 4 8",
                            Term = 36
                        },
                        new
                        {
                            Title = "Строковий",
                            Description = "Розміщуйте кошти та гарантовано отримайте максимально можливий дохід навіть протягом короткого строку.",
                            MaxSumOfDeposit = 1000000.0,
                            MinSumOfDeposit = 5000.0,
                            PercentAfterTax = 5.6299999999999999,
                            PercentBeforeTax = 7.0,
                            PhotoNumbersId = "1 5 2 6 3 7 4 11",
                            Term = 12
                        },
                        new
                        {
                            Title = "Перспективний",
                            Description = "Депозит «Перспективний» зі ставкою, що зростає, та можливістю повного дострокового повернення вкладу без втрати процентів.",
                            MaxSumOfDeposit = 1000000.0,
                            MinSumOfDeposit = 5000.0,
                            PercentAfterTax = 4.8300000000000001,
                            PercentBeforeTax = 6.0,
                            PhotoNumbersId = "1 5 2 6 3 7 4 8",
                            Term = 6
                        },
                        new
                        {
                            Title = "Ощадний",
                            Description = "Поповнюйте депозит в будь-який час або частково знімайте кошти без штрафних санкцій.",
                            MaxSumOfDeposit = 1000000.0,
                            MinSumOfDeposit = 5000.0,
                            PercentAfterTax = 1.6100000000000001,
                            PercentBeforeTax = 2.0,
                            PhotoNumbersId = "1 5 2 9 3 7 4 8",
                            Term = 9
                        },
                        new
                        {
                            Title = "Накопичувальний",
                            Description = "Поповнюйте свій депозит будь-коли та отримуйте максимальний дохід у кінці сроку.",
                            MaxSumOfDeposit = 1000000.0,
                            MinSumOfDeposit = 5000.0,
                            PercentAfterTax = 4.0300000000000002,
                            PercentBeforeTax = 5.0,
                            PhotoNumbersId = "1 5 2 6 3 10 4 8",
                            Term = 6
                        },
                        new
                        {
                            Title = "Мобільні заощадження",
                            Description = "Додатковий дохід та швидке управління тимчасово вільними коштами за допомогою картки та мобільного додатку.",
                            MaxSumOfDeposit = 1000000.0,
                            MinSumOfDeposit = 500.0,
                            PercentAfterTax = 2.8199999999999998,
                            PercentBeforeTax = 3.5,
                            PhotoNumbersId = "1 5 2 6 3 10 4 8",
                            Term = 36
                        });
                });

            modelBuilder.Entity("CourseWork_Update.Models.Deposits.PhotoInfosModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PhotoInfos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Строк розміщення: ",
                            PhotoNumber = "1-1"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Мінімальна сума вкладу: ",
                            PhotoNumber = "1-2"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Відсоткова ставка: ",
                            PhotoNumber = "1-3"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Максимальна сума: ",
                            PhotoNumber = "1-4"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Валюта: гривня",
                            PhotoNumber = "2-1"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Умови сплати процентів: у кінці строку розміщення",
                            PhotoNumber = "2-2"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Без можливості поповнення",
                            PhotoNumber = "2-3"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Без можливості дострокового розірвання",
                            PhotoNumber = "2-4"
                        },
                        new
                        {
                            Id = 9,
                            Description = "З можливістю часткового зняття коштів",
                            PhotoNumber = "2-2-1"
                        },
                        new
                        {
                            Id = 10,
                            Description = "З можливостю поповнення",
                            PhotoNumber = "2-3-1"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Програма лояльності",
                            PhotoNumber = "2-4-1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
